# Generated by Django 5.1.7 on 2025-08-19 19:48

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ActeKt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=20, unique=True)),
                ("libelle", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Acte Kt",
                "verbose_name_plural": "Actes Kt",
            },
        ),
        migrations.CreateModel(
            name="ActeLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom",
                    models.CharField(
                        help_text="Nom de l'acte chirurgical ou interventionnel",
                        max_length=255,
                        verbose_name="Nom de l'acte",
                    ),
                ),
                (
                    "prix",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Prix de base de l'acte sans les suppléments",
                        max_digits=10,
                        verbose_name="Prix de l'acte",
                    ),
                ),
                (
                    "duree_estimee",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Durée estimée pour cet acte",
                        null=True,
                        verbose_name="Durée estimée (minutes)",
                    ),
                ),
                (
                    "est_actif",
                    models.BooleanField(default=True, verbose_name="Acte actif"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description de l'acte"),
                ),
                ("date_creation", models.DateTimeField(auto_now_add=True)),
                ("date_modification", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Acte de location",
                "verbose_name_plural": "Actes de location",
                "ordering": ["nom"],
            },
        ),
        migrations.CreateModel(
            name="ActeProduitInclus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantite_standard",
                    models.PositiveIntegerField(
                        default=1, verbose_name="Quantité standard"
                    ),
                ),
                (
                    "est_obligatoire",
                    models.BooleanField(
                        default=True, verbose_name="Produit obligatoire"
                    ),
                ),
            ],
            options={
                "verbose_name": "Produit inclus dans l'acte",
                "verbose_name_plural": "Produits inclus dans les actes",
            },
        ),
        migrations.CreateModel(
            name="Bloc",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom_bloc",
                    models.CharField(max_length=100, verbose_name="Nom du bloc"),
                ),
                (
                    "prix_base",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Prix pour les 90 premières minutes",
                        max_digits=10,
                        verbose_name="Prix de base (90 min)",
                    ),
                ),
                (
                    "prix_supplement_30min",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("5000.00"),
                        max_digits=10,
                        verbose_name="Prix par tranche de 30 min supplémentaire",
                    ),
                ),
                (
                    "est_actif",
                    models.BooleanField(default=True, verbose_name="Bloc actif"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
            ],
            options={
                "verbose_name": "Bloc opératoire",
                "verbose_name_plural": "Blocs opératoires",
            },
        ),
        migrations.CreateModel(
            name="BlocProduitInclus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantite",
                    models.PositiveIntegerField(
                        default=1, verbose_name="Quantité incluse"
                    ),
                ),
            ],
            options={
                "verbose_name": "Produit inclus dans le bloc",
                "verbose_name_plural": "Produits inclus dans les blocs",
            },
        ),
        migrations.CreateModel(
            name="ConsommationProduitBloc",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantite",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Quantité réellement utilisée",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "quantite_incluse",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Quantité incluse dans le forfait/bloc/acte",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0"))
                        ],
                    ),
                ),
                (
                    "ecart_quantite",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Écart entre quantité utilisée et incluse (calculé automatiquement)",
                        max_digits=10,
                    ),
                ),
                (
                    "prix_unitaire",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Prix unitaire du produit au moment de la consommation",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0"))
                        ],
                    ),
                ),
                (
                    "est_inclus",
                    models.BooleanField(
                        default=False,
                        help_text="True si entièrement inclus (pas de supplément à facturer)",
                    ),
                ),
                (
                    "source_inclusion",
                    models.CharField(
                        choices=[
                            ("BLOC", "Inclus dans le bloc"),
                            ("FORFAIT", "Inclus dans le forfait"),
                            ("FORFAIT_ACTE", "Inclus via acte forfaitaire"),
                            ("FORFAIT_MIXTE", "Forfait + acte forfaitaire"),
                            ("ACTE", "Inclus dans un acte"),
                            ("ACTE_SUPPLEMENTAIRE", "Acte supplémentaire"),
                            ("SUPPLEMENTAIRE", "Produit supplémentaire"),
                            ("MIXTE", "Sources multiples"),
                        ],
                        default="SUPPLEMENTAIRE",
                        help_text="Source d'inclusion du produit",
                        max_length=20,
                    ),
                ),
                (
                    "date_consommation",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date et heure de création de l'enregistrement",
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, help_text="Notes sur la consommation"),
                ),
            ],
            options={
                "verbose_name": "Consommation de produit",
                "verbose_name_plural": "Consommations de produits",
                "db_table": "medical_consommation_produit_bloc",
                "ordering": ["location", "produit__nom"],
            },
        ),
        migrations.CreateModel(
            name="Convention",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=20, unique=True)),
                ("nom", models.CharField(max_length=255, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Convention KT",
                "verbose_name_plural": "Conventions KT",
            },
        ),
        migrations.CreateModel(
            name="Forfait",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom",
                    models.CharField(max_length=100, verbose_name="Nom du forfait"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "prix",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Prix total du forfait",
                        max_digits=10,
                        verbose_name="Prix du forfait",
                    ),
                ),
                (
                    "duree",
                    models.PositiveIntegerField(
                        help_text="Durée totale couverte par le forfait",
                        verbose_name="Durée du forfait (en minutes)",
                    ),
                ),
                (
                    "est_actif",
                    models.BooleanField(default=True, verbose_name="Forfait actif"),
                ),
                ("date_creation", models.DateTimeField(auto_now_add=True)),
                ("date_modification", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Forfait",
                "verbose_name_plural": "Forfaits",
            },
        ),
        migrations.CreateModel(
            name="ForfaitActeInclus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantite",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="Nombre de fois que cet acte est inclus dans le forfait",
                        verbose_name="Quantité incluse",
                    ),
                ),
                (
                    "prix_unitaire_inclus",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Prix unitaire de l'acte tel qu'inclus dans le forfait (peut différer du prix standard)",
                        max_digits=10,
                        null=True,
                        verbose_name="Prix unitaire inclus",
                    ),
                ),
            ],
            options={
                "verbose_name": "Acte inclus dans le forfait",
                "verbose_name_plural": "Actes inclus dans les forfaits",
            },
        ),
        migrations.CreateModel(
            name="ForfaitProduitInclus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantite",
                    models.PositiveIntegerField(default=1, verbose_name="Quantité"),
                ),
            ],
            options={
                "verbose_name": "Produit inclus dans le forfait",
                "verbose_name_plural": "Produits inclus dans les forfaits",
            },
        ),
        migrations.CreateModel(
            name="HonorairesMedecin",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "montant",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Tarif appliqué",
                    ),
                ),
                (
                    "date_effective",
                    models.DateField(
                        default=django.utils.timezone.now, verbose_name="Date d'effet"
                    ),
                ),
            ],
            options={
                "verbose_name": "Config honoraire médecin",
                "verbose_name_plural": "Config honoraires médecins",
                "ordering": ["-date_effective"],
            },
        ),
        migrations.CreateModel(
            name="LocationBloc",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_operation",
                    models.DateField(db_index=True, verbose_name="Date de l'opération"),
                ),
                (
                    "heure_operation",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Heure de l'opération"
                    ),
                ),
                (
                    "nom_acte",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Nom de l'acte chirurgical",
                    ),
                ),
                (
                    "type_tarification",
                    models.CharField(
                        choices=[("FORFAIT", "Forfaitaire"), ("DUREE", "À la durée")],
                        default="DUREE",
                        max_length=10,
                        verbose_name="Type de tarification",
                    ),
                ),
                (
                    "duree_reelle",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Durée réelle de l'opération",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Durée réelle (minutes)",
                    ),
                ),
                (
                    "prix_final",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Prix final",
                    ),
                ),
                (
                    "prix_supplement_duree",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Supplément ajouté si la durée réelle dépasse celle du forfait",
                        max_digits=10,
                        verbose_name="Supplément durée",
                    ),
                ),
                (
                    "observations",
                    models.TextField(blank=True, verbose_name="Observations"),
                ),
                (
                    "date_creation",
                    models.DateTimeField(auto_now_add=True, db_index=True),
                ),
                ("date_modification", models.DateTimeField(auto_now=True)),
                (
                    "montant_paye_caisse",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Montant effectivement reçu par la caisse",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Montant payé à la caisse",
                    ),
                ),
                (
                    "difference_paiement",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Différence entre montant facturé et montant payé (+ = surplus, - = complément)",
                        max_digits=10,
                        verbose_name="Différence de paiement",
                    ),
                ),
                (
                    "statut_paiement",
                    models.CharField(
                        choices=[
                            ("EQUILIBRE", "Équilibré"),
                            ("SURPLUS_CLINIQUE", "Surplus à verser au médecin"),
                            ("COMPLEMENT_MEDECIN", "Complément dû par le médecin"),
                            ("AUCUN_PAIEMENT", "Aucun paiement enregistré"),
                        ],
                        default="AUCUN_PAIEMENT",
                        max_length=20,
                        verbose_name="Statut du paiement",
                    ),
                ),
                (
                    "surplus_a_verser",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Montant que la clinique doit verser au médecin",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Surplus à verser au médecin",
                    ),
                ),
                (
                    "complement_du_medecin",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Montant que le médecin doit payer à la clinique",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Complément dû par le médecin",
                    ),
                ),
                (
                    "notes_paiement",
                    models.TextField(
                        blank=True,
                        help_text="Notes relatives au paiement ou aux arrangements financiers",
                        verbose_name="Notes sur le paiement",
                    ),
                ),
                (
                    "date_reglement_surplus",
                    models.DateField(
                        blank=True,
                        help_text="Date à laquelle le surplus a été versé au médecin",
                        null=True,
                        verbose_name="Date de règlement du surplus",
                    ),
                ),
                (
                    "date_reglement_complement",
                    models.DateField(
                        blank=True,
                        help_text="Date à laquelle le médecin a payé le complément",
                        null=True,
                        verbose_name="Date de règlement du complément",
                    ),
                ),
            ],
            options={
                "verbose_name": "Location de bloc",
                "verbose_name_plural": "Locations de bloc",
            },
        ),
        migrations.CreateModel(
            name="LocationBlocActe",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantite", models.PositiveIntegerField(default=1)),
                ("prix_unitaire", models.DecimalField(decimal_places=2, max_digits=10)),
                ("prix_total", models.DecimalField(decimal_places=2, max_digits=10)),
            ],
            options={
                "verbose_name": "Acte dans une location de bloc",
                "verbose_name_plural": "Actes dans les locations de bloc",
            },
        ),
        migrations.CreateModel(
            name="PrestationActe",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tarif_conventionne",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        verbose_name="Tarif conventionné",
                    ),
                ),
                (
                    "convention_accordee",
                    models.BooleanField(
                        blank=True,
                        help_text="Uniquement si une convention est sélectionnée",
                        null=True,
                        verbose_name="Statut Convention",
                    ),
                ),
                (
                    "honoraire_medecin",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(
                                Decimal("99999999.99")
                            ),
                        ],
                        verbose_name="Honoraire médecin",
                    ),
                ),
                (
                    "commentaire",
                    models.TextField(blank=True, verbose_name="Commentaire médical"),
                ),
            ],
            options={
                "verbose_name": "Détail d'acte",
                "verbose_name_plural": "Détails des actes",
            },
        ),
        migrations.CreateModel(
            name="PrestationKt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_prestation",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="Date de réalisation",
                    ),
                ),
                (
                    "statut",
                    models.CharField(
                        choices=[
                            ("PLANIFIE", "Planifié"),
                            ("REALISE", "Réalisé"),
                            ("PAYE", "Payé"),
                            ("ANNULE", "Annulé"),
                        ],
                        default="PLANIFIE",
                        max_length=25,
                        verbose_name="Statut de la prestation",
                    ),
                ),
                (
                    "prix_total",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Coût total"
                    ),
                ),
                (
                    "prix_supplementaire",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Coût supplémentaire pour la prestation (hors actes et consommations)",
                        max_digits=10,
                        verbose_name="Frais supplémentaires",
                    ),
                ),
                (
                    "prix_supplementaire_medecin",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        verbose_name="Part médecin du supplément",
                    ),
                ),
                (
                    "observations",
                    models.TextField(blank=True, verbose_name="Observations médicales"),
                ),
            ],
            options={
                "verbose_name": "PrestationKt médicale",
                "verbose_name_plural": "Prestations médicales",
                "ordering": ["-date_prestation"],
            },
        ),
        migrations.CreateModel(
            name="PrixSupplementaireConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "pourcentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Pourcentage à appliquer sur le prix supplémentaire par médecin.",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="Pourcentage supplémentaire (%)",
                    ),
                ),
            ],
            options={
                "verbose_name": "Configuration Prix Supplémentaire KT",
                "verbose_name_plural": "Configurations Prix Supplémentaires KT",
            },
        ),
        migrations.CreateModel(
            name="RendezVous",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_heure",
                    models.DateTimeField(verbose_name="Date et heure du rendez-vous"),
                ),
                (
                    "duree",
                    models.PositiveIntegerField(
                        default=30, verbose_name="Durée prévue (minutes)"
                    ),
                ),
                ("motif", models.TextField(verbose_name="Motif de consultation")),
                (
                    "statut",
                    models.CharField(
                        choices=[
                            ("PLANIFIE", "Planifié"),
                            ("CONFIRME", "Confirmé"),
                            ("ANNULE", "Annulé"),
                            ("TERMINE", "Terminé"),
                        ],
                        default="PLANIFIE",
                        max_length=20,
                        verbose_name="Statut du rendez-vous",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, null=True, verbose_name="Notes supplémentaires"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Dernière mise à jour"
                    ),
                ),
            ],
            options={
                "verbose_name": "Rendez-vous Médical",
                "verbose_name_plural": "Rendez-vous Médicaux",
                "ordering": ["-date_heure"],
            },
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("color", models.CharField(blank=True, max_length=7, null=True)),
                ("est_stockeur", models.BooleanField(default=False)),
                ("est_pharmacies", models.BooleanField(default=False)),
                (
                    "est_hospitalier",
                    models.BooleanField(
                        default=False, verbose_name="Service hospitalier"
                    ),
                ),
                ("est_actif", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Service",
                "verbose_name_plural": "Services",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TarifActe",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "montant",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        verbose_name="Montant de l'acte",
                    ),
                ),
                (
                    "montant_honoraire_base",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Honoraire de base pour cet acte/convention",
                        max_digits=10,
                        verbose_name="Montant d'honoraire de base",
                    ),
                ),
                ("date_effective", models.DateField(default=django.utils.timezone.now)),
                (
                    "is_default",
                    models.BooleanField(
                        default=False,
                        help_text="Cocher pour que ce tarif soit celui par défaut",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tarif d'acte",
                "verbose_name_plural": "Tarifs d'actes",
                "ordering": ["-is_default", "-date_effective"],
            },
        ),
        migrations.CreateModel(
            name="ActeProduit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantite_defaut",
                    models.PositiveIntegerField(
                        default=1, verbose_name="Quantité par défaut"
                    ),
                ),
                (
                    "acte",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="produits_defaut",
                        to="medical.actekt",
                        verbose_name="ActeKt médical",
                    ),
                ),
            ],
            options={
                "verbose_name": "Produit par défaut pour acte",
                "verbose_name_plural": "Produits par défaut pour actes",
            },
        ),
    ]
