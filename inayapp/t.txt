# Documentation Syst√®me d'Approvisionnement Django

## Vue d'ensemble

Ce syst√®me g√®re deux types d'approvisionnement :
- **Approvisionnement interne** : Services ‚Üí Pharmacie
- **Approvisionnement externe** : Pharmacie ‚Üí Fournisseurs

## Architecture du Syst√®me

### 1. Approvisionnement Interne (Services ‚Üí Pharmacie)

#### üîÑ Flux de processus :
1. **Expression de Besoin** : Un service √©met une demande de produits
2. **Validation** : La pharmacie valide et ajuste les quantit√©s
3. **Pr√©paration** : La pharmacie pr√©pare les produits du stock existant
4. **Livraison interne** : Distribution au service demandeur

#### üìã Mod√®les impliqu√©s :
- `ExpressionBesoin` : Demande d'un service
- `LigneBesoin` : D√©tail des produits demand√©s

### 2. Approvisionnement Externe (Pharmacie ‚Üí Fournisseurs)

#### üîÑ Flux de processus :
1. **Commande Fournisseur** : La pharmacie commande aupr√®s d'un fournisseur
2. **Confirmation** : Validation de la commande
3. **Livraison** : R√©ception des produits du fournisseur
4. **Bon de r√©ception** : Contr√¥le et mise √† jour du stock

#### üìã Mod√®les impliqu√©s :
- `CommandeFournisseur` : Commande pass√©e au fournisseur
- `LigneCommande` : D√©tail des produits command√©s
- `Livraison` : R√©ception physique des produits
- `LigneLivraison` : D√©tail des produits livr√©s
- `BonReception` : Document de contr√¥le de r√©ception

## Structure des Mod√®les

### ExpressionBesoin (Approvisionnement Interne)

```python
class ExpressionBesoin(models.Model):
    STATUT_CHOICES = [
        ("EN_ATTENTE", "En attente"),
        ("VALIDE", "Valid√©e"),
        ("REJETE", "Rejet√©e"),
        ("SERVIE", "Servie"),
    ]
    
    reference = models.CharField(max_length=50, unique=True)
    service_demandeur = models.ForeignKey("medical.Service")
    service_approvisionneur = models.ForeignKey("medical.Service")
    statut = models.CharField(max_length=20, choices=STATUT_CHOICES)
    date_creation = models.DateTimeField(auto_now_add=True)
    valide_par = models.ForeignKey(User, null=True, blank=True)
```

### CommandeFournisseur (Approvisionnement Externe)

```python
class CommandeFournisseur(models.Model):
    STATUT_CHOICES = [
        ("BROUILLON", "Brouillon"),
        ("EN_ATTENTE", "En attente"),
        ("CONFIRME", "Confirm√©e"),
        ("ANNULE", "Annul√©e"),
        ("LIVREE", "Livr√©e"),
    ]
    
    reference = models.CharField(max_length=50, unique=True)
    besoin = models.ForeignKey(ExpressionBesoin, null=True, blank=True)
    fournisseur = models.ForeignKey("Fournisseur")
    statut = models.CharField(max_length=20, choices=STATUT_CHOICES)
    date_commande = models.DateTimeField(auto_now_add=True)
```

## Vues et Fonctionnalit√©s

### 1. Dashboard Approvisionnement

**URL** : `/approvisionnement/dashboard/`
**Classe** : `DashboardView`

**Fonctionnalit√©s** :
- Statistiques globales en temps r√©el
- Alertes importantes (retards, p√©remptions)
- Activit√© r√©cente
- Actions rapides

### 2. Gestion des Expressions de Besoin

#### Liste des Besoins
- **URL** : `/approvisionnement/besoins/`
- **Classe** : `ExpressionBesoinListView`
- **Fonctionnalit√©s** : Filtrage par statut, service, pagination

#### Cr√©ation de Besoin
- **URL** : `/approvisionnement/besoins/nouveau/`
- **Classe** : `ExpressionBesoinCreateView`
- **Fonctionnalit√©s** : Interface AJAX, recherche de produits

#### Validation de Besoin
- **URL** : `/approvisionnement/besoins/{id}/validation/`
- **Classe** : `ExpressionBesoinValidationView`
- **Fonctionnalit√©s** : Validation/rejet avec ajustement des quantit√©s

### 3. Gestion des Commandes Fournisseurs

#### Liste des Commandes
- **URL** : `/approvisionnement/commandes/`
- **Classe** : `CommandeFournisseurListView`
- **Fonctionnalit√©s** : Filtrage par statut, fournisseur

#### Cr√©ation de Commande
- **URL** : `/approvisionnement/commandes/nouveau/`
- **Classe** : `CommandeFournisseurCreateView`
- **Fonctionnalit√©s** : Import depuis expression de besoin, calcul automatique des totaux

### 4. Gestion des Livraisons

#### R√©ception de Livraison
- **URL** : `/approvisionnement/livraisons/{id}/reception/`
- **Classe** : `LivraisonReceptionView`
- **Fonctionnalit√©s** : Mise √† jour automatique du stock, g√©n√©ration bon de r√©ception

## Interfaces Utilisateur

### Templates Principaux

1. **base_approvisionnement.html** : Template de base avec sidebar
2. **dashboard.html** : Tableau de bord principal
3. **expression_besoin_*.html** : Gestion des besoins internes
4. **commande_fournisseur_*.html** : Gestion des commandes externes
5. **livraison_*.html** : Gestion des livraisons
6. **bon_reception_*.html** : Gestion des bons de r√©ception

### Fonctionnalit√©s JavaScript

#### Recherche de Produits
```javascript
function setupSearchProduit() {
    const searchInput = document.getElementById('searchProduit');
    searchInput.addEventListener('input', function() {
        // Recherche en temps r√©el avec filtrage
        const query = this.value.toLowerCase().trim();
        // ... logique de filtrage
    });
}
```

#### Gestion Dynamique des Lignes
```javascript
function addLigne() {
    const template = document.getElementById('ligneTemplate');
    const clone = template.content.cloneNode(true);
    // ... ajout dynamique de lignes de produits
}
```

## API Endpoints

### Donn√©es Dynamiques

1. **GET** `/api/produits/` - Liste des produits actifs
2. **GET** `/api/besoins/{id}/lignes/` - Lignes d'un besoin
3. **GET** `/api/commandes/{id}/lignes/` - Lignes d'une commande

### Actions

1. **POST** `/besoins/{id}/validation/` - Validation/rejet d'un besoin
2. **POST** `/commandes/{id}/confirmer/` - Confirmation d'une commande
3. **POST** `/livraisons/{id}/reception/` - R√©ception d'une livraison

## Gestion du Stock

### Mise √† jour automatique lors de la r√©ception

```python
def recevoir(self, user):
    # Mise √† jour du stock
    service_pharmacie = Service.objects.get(est_pharmacies=True)
    
    for ligne in self.lignes.all():
        Stock.objects.update_or_create_stock(
            produit=ligne.produit,
            service=service_pharmacie,
            date_peremption=ligne.date_peremption,
            numero_lot=ligne.numero_lot,
            quantite=ligne.quantite_livree,
        )
        
        MouvementStock.log_mouvement(
            instance=self,
            type_mouvement="ENTREE",
            produit=ligne.produit,
            service=service_pharmacie,
            quantite=ligne.quantite_livree,
            lot_concerne=ligne.numero_lot,
        )
```

## S√©curit√© et Permissions

### Authentification
- Toutes les vues utilisent `LoginRequiredMixin`
- Protection CSRF sur les formulaires AJAX

### Validation des Donn√©es
- Validation c√¥t√© serveur avec `transaction.atomic()`
- V√©rification des statuts avant les transitions d'√©tat
- Validation des quantit√©s et dates

## Fonctionnalit√©s Avanc√©es

### 1. Suivi des Dates de P√©remption
- Alertes automatiques pour les produits bient√¥t p√©rim√©s
- Contr√¥le lors des r√©ceptions
- Badges color√©s dans les interfaces

### 2. Tra√ßabilit√© des Lots
- Num√©ro de lot obligatoire pour chaque ligne de livraison
- Suivi du lot depuis la r√©ception jusqu'√† la distribution

### 3. Comparaison Commande/Livraison
- Affichage des √©carts entre quantit√©s command√©es et livr√©es
- Statuts : Complet, Partiel, Non livr√©

### 4. G√©n√©ration de Documents
- Bons de r√©ception automatiques
- Export PDF/Excel des listes
- Impression des documents

## Points d'Extension

### 1. Notifications
```python
# Exemple d'extension pour les notifications
def send_notification_on_reception(livraison):
    if livraison.statut == 'RECU':
        # Notifier le service demandeur si besoin li√©
        if livraison.commande.besoin:
            notify_service(livraison.commande.besoin.service_demandeur)
```

### 2. Workflow Avanc√©
- √âtats interm√©diaires (En pr√©paration, En cours de livraison)
- Validations multiples
- D√©l√©gation de signatures

### 3. Int√©grations Externes
- API fournisseurs pour commandes automatiques
- Codes-barres pour la r√©ception
- EDI (Electronic Data Interchange)

## Maintenance et Monitoring

### T√¢ches P√©riodiques
1. Nettoyage des expressions de besoin anciennes
2. Alertes sur les retards de livraison
3. Rapports mensuels d'activit√©

### Logs et Audit
- Tra√ßabilit√© compl√®te des actions utilisateur
- Logs de modification de stock
- Historique des validations

Cette architecture permet une gestion compl√®te et tra√ßable des approvisionnements, tant internes qu'externes, avec une interface moderne et des fonctionnalit√©s avanc√©es de suivi et de contr√¥le.